

"// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Importa la interfaz IERC20 de un contrato de token ERC20 estÃ¡ndar
import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";

contract PetCareSeguro {
    address public owner;
    address public subred; // Direccion de la subred en Sepolia
    uint256 public montoMaximoCobertura;
    uint256 public costoPoliza;
    mapping(address => uint256) public polizas;

    event PolizaAdquirida(address indexed asegurado, uint256 monto);
    event ReclamacionPresentada(address indexed asegurado, uint256 monto);

    constructor(uint256 _montoMaximoCobertura, uint256 _costoPoliza, address _subred) {
        owner = msg.sender;
        montoMaximoCobertura = _montoMaximoCobertura;
        costoPoliza = _costoPoliza;
        subred = _subred; // Configura la direccion de la subred
    }

    modifier soloOwner() {
        require(msg.sender == owner, ""Solo el propietario puede ejecutar esta funcion"");
        _;
    }

    function adquirirPoliza() external payable {
        require(msg.value >= costoPoliza, ""El monto enviado no es suficiente para adquirir la poliza"");
        require(polizas[msg.sender] == 0, ""El asegurado ya tiene una poliza activa"");

        polizas[msg.sender] = costoPoliza;
        emit PolizaAdquirida(msg.sender, costoPoliza);
    }

    function presentarReclamacion(uint256 _monto) external {
        require(_monto > 0, ""El monto de la reclamacion debe ser mayor que cero"");
        require(polizas[msg.sender] >= _monto, ""El asegurado no tiene suficiente cobertura para esta reclamacion"");

        // Procesa la reclamacion y paga al asegurado
        procesarReclamacionYPagar(msg.sender, _monto);

        // Actualiza la cobertura del asegurado restando el monto reclamado
        polizas[msg.sender] -= _monto;

        emit ReclamacionPresentada(msg.sender, _monto);
    }

    function procesarReclamacionYPagar(address _asegurado, uint256 _montoReclamado) private {
        // Verifica que el contrato tenga suficientes fondos para cubrir la reclamacion
        require(address(this).balance >= _montoReclamado, ""El contrato no tiene suficientes fondos para pagar la reclamacion"");

        // Transfiere el monto reclamado al asegurado
        payable(_asegurado).transfer(_montoReclamado);
    }

    function consultarCobertura(address _asegurado) external view returns (uint256) {
        return polizas[_asegurado];
    }

    function cambiarCostoPoliza(uint256 _nuevoCosto) external soloOwner {
        costoPoliza = _nuevoCosto;
    }

    function aumentarMontoMaximoCobertura(uint256 _montoAdicional) external soloOwner {
        montoMaximoCobertura += _montoAdicional;
    }

    function retirarFondos() external soloOwner {
        payable(owner).transfer(address(this).balance);
    }
}
"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































